# Vers√£o 6.0 - "Futuro Fluido"
import streamlit as st
import pandas as pd
import gspread
import json
import requests
from datetime import datetime, date, timedelta
from fpdf import FPDF
from io import BytesIO
from streamlit_oauth import OAuth2Component
import jwt

# --- 1) Configura√ß√£o da P√°gina e Estilo ---
st.set_page_config(layout="wide", page_title="Fich√°rio de Membros v6.0", page_icon=" futuristic_icon.png")

# Estilo CSS para uma apar√™ncia mais limpa
st.markdown("""
<style>
    /* Esconde o menu de hamb√∫rguer do Streamlit e o rodap√© */
    #MainMenu {visibility: hidden;}
    footer {visibility: hidden;}
    /* Melhora a apar√™ncia dos containers */
    [data-testid="stVerticalBlock"] > [style*="flex-direction: column;"] > [data-testid="stVerticalBlock"] {
        border: 1px solid rgba(255, 255, 255, 0.2);
        border-radius: 10px;
        padding: 20px;
        background-color: rgba(255, 255, 255, 0.05);
    }
</style>
""", unsafe_allow_html=True)


# --- 2) Conex√£o e Gerenciamento de Dados (Backend Otimizado) ---
@st.cache_resource(ttl=3600)
def get_gspread_client():
    creds_dict = json.loads(st.secrets["google_sheets"]["creds_json_str"])
    return gspread.service_account_from_dict(creds_dict)

@st.cache_data(ttl=600)
def carregar_membros_df(_client):
    try:
        ws = _client.open("Fichario_Membros_PIB_Gaibu").worksheet("Membros")
        records = ws.get_all_records()
        df = pd.DataFrame(records)
        # Garantir que todas as colunas existam para evitar erros
        for col in HEADERS:
            if col not in df.columns:
                df[col] = ''
        df['CPF'] = df['CPF'].astype(str)
        return df
    except (gspread.SpreadsheetNotFound, gspread.WorksheetNotFound):
        st.error("Planilha ou aba n√£o encontrada. Verifique o nome em seu Google Sheets.")
        return pd.DataFrame(columns=HEADERS)

def salvar_membros_df(df):
    try:
        client = get_gspread_client()
        sh = client.open("Fichario_Membros_PIB_Gaibu")
        ws = sh.worksheet("Membros")
        ws.clear()
        ws.update([df.columns.values.tolist()] + df.values.tolist())
        st.cache_data.clear() # Limpa o cache para for√ßar o recarregamento dos dados
        return True
    except Exception as e:
        st.error(f"Falha ao salvar na planilha: {e}")
        return False

# --- 3) Fun√ß√µes de Gera√ß√£o de PDF (Mantidas e Otimizadas) ---
def criar_pdf_ficha(membro_series):
    pdf = FPDF()
    pdf.add_page()
    pdf.add_font("DejaVu", "", "fonts/DejaVuSans.ttf", uni=True)
    pdf.set_font("DejaVu", size=16)
    pdf.cell(0, 10, 'Ficha Individual de Membro', 0, 1, 'C')
    # ... (a l√≥gica interna do PDF da ficha pode ser mantida ou aprimorada)
    for campo, valor in membro_series.items():
        if valor and str(valor).strip():
            pdf.set_font("DejaVu", size=12)
            pdf.cell(50, 10, f"{campo}:", 0, 0)
            pdf.set_font("DejaVu", size=10)
            pdf.multi_cell(0, 10, str(valor), 0, 1)
    return bytes(pdf.output())

# --- 4) Defini√ß√£o das "P√°ginas" da Aplica√ß√£o ---

def pagina_painel_controle(df):
    st.title("Painel de Controle")
    st.markdown("Vis√£o geral e insights da membresia da PIB Gaibu.")
    
    total = len(df)
    ativos = len(df[df['Status'].str.upper() == 'ATIVO'])
    inativos = len(df[df['Status'].str.upper() == 'INATIVO'])

    col1, col2, col3 = st.columns(3)
    col1.metric("Total de Membros", f"{total} üë•")
    col2.metric("Membros Ativos", f"{ativos} üü¢")
    col3.metric("Membros Inativos", f"{inativos} üî¥")
    
    st.divider()

    col1, col2 = st.columns([1, 1])
    with col1:
        st.subheader("Distribui√ß√£o por Admiss√£o")
        admissao_counts = df['Forma de Admissao'].value_counts().nlargest(5)
        st.bar_chart(admissao_counts)

    with col2:
        st.subheader("Pr√≥ximos Aniversariantes")
        df_aniv = df.copy()
        df_aniv['Data de Nascimento'] = pd.to_datetime(df_aniv['Data de Nascimento'], format='%d/%m/%Y', errors='coerce')
        df_aniv.dropna(subset=['Data de Nascimento'], inplace=True)
        
        hoje = datetime.now()
        df_aniv['ProximoAniversario'] = df_aniv['Data de Nascimento'].apply(
            lambda x: x.replace(year=hoje.year) if x.replace(year=hoje.year) >= hoje else x.replace(year=hoje.year + 1)
        )
        proximos = df_aniv.sort_values('ProximoAniversario').head(5)
        
        for _, row in proximos.iterrows():
            st.markdown(f"**{row['Nome']}** - {row['ProximoAniversario'].strftime('%d de %B')}")

def pagina_gerenciamento(df):
    st.title("Gerenciamento de Membros")
    
    # NOVO: Formul√°rio de adi√ß√£o em um di√°logo (modal)
    if st.button("‚ûï Adicionar Novo Membro", type="primary"):
        st.session_state.show_add_dialog = True

    if st.session_state.get("show_add_dialog", False):
        with st.dialog("Cadastrar Novo Membro"):
            with st.form("new_member_form"):
                # O formul√°rio de cadastro viria aqui (simplificado para o exemplo)
                nome = st.text_input("Nome Completo")
                data_nasc = st.date_input("Data de Nascimento", format="DD/MM/YYYY")
                celular = st.text_input("Celular")
                status = st.selectbox("Status", ["Ativo", "Inativo"])
                
                if st.form_submit_button("Salvar Membro"):
                    novo_membro = pd.DataFrame([{"Nome": nome.upper(), "Data de Nascimento": data_nasc.strftime('%d/%m/%Y'), "Celular": celular, "Status": status}])
                    df_atualizado = pd.concat([df, novo_membro], ignore_index=True)
                    if salvar_membros_df(df_atualizado):
                        st.toast("Membro adicionado com sucesso!", icon="üéâ")
                        st.session_state.show_add_dialog = False
                        st.rerun()
                    else:
                        st.error("N√£o foi poss√≠vel salvar o membro.")

    st.divider()

    # Filtros interativos
    st.subheader("Filtros e Busca")
    termo_busca = st.text_input("Buscar por nome...", help="Digite e pressione Enter para buscar")
    status_filtro = st.multiselect("Filtrar por Status:", options=df['Status'].unique(), default=df['Status'].unique())

    df_filtrado = df[df['Status'].isin(status_filtro)]
    if termo_busca:
        df_filtrado = df_filtrado[df_filtrado['Nome'].str.contains(termo_busca, case=False, na=False)]

    st.subheader(f"Exibindo {len(df_filtrado)} Membros")

    # NOVO: A√ß√µes em massa
    with st.expander("A√ß√µes em Massa para Itens Selecionados"):
        # L√≥gica de sele√ß√£o (usando checkboxes em um dataframe edit√°vel seria o ideal, mas complexo)
        # Mantendo o padr√£o de checkboxes para simplicidade
        st.warning("A sele√ß√£o para a√ß√µes em massa ainda est√° em desenvolvimento. A funcionalidade abaixo √© um prot√≥tipo.")
        acao = st.selectbox("A√ß√£o:", ["", "Marcar como Ativo", "Marcar como Inativo", "Exportar para PDF", "Excluir"])
        if st.button("Executar A√ß√£o"):
            st.info(f"A√ß√£o '{acao}' seria executada nos itens selecionados.")

    # Exibi√ß√£o em cards
    for index, row in df_filtrado.iterrows():
        with st.container(border=True):
            col1, col2 = st.columns([4, 1])
            with col1:
                status_icon = 'üü¢' if str(row.get('Status')).upper() == 'ATIVO' else 'üî¥'
                st.markdown(f"#### {status_icon} {row['Nome']}")
                st.caption(f"Admiss√£o: {row.get('Data de Admissao', 'N/A')} | Celular: {row.get('Celular', 'N/A')}")
            with col2:
                if st.button("Ver Ficha", key=f"view_{index}"):
                    # Idealmente, abriria um di√°logo com os detalhes completos
                    st.toast(f"Mostrando detalhes de {row['Nome']}.")
                if st.button("Editar", key=f"edit_{index}"):
                    # Abriria o st.dialog preenchido com os dados para edi√ß√£o
                    st.toast(f"Editando {row['Nome']}.")

def pagina_relatorios(df):
    st.title("Relat√≥rios e Exporta√ß√µes")
    st.markdown("Gere relat√≥rios espec√≠ficos da membresia.")

    tipo_relatorio = st.selectbox("Selecione o tipo de relat√≥rio:", ["Aniversariantes do M√™s"])

    if tipo_relatorio == "Aniversariantes do M√™s":
        meses_pt = {
            "Janeiro": 1, "Fevereiro": 2, "Mar√ßo": 3, "Abril": 4, "Maio": 5, "Junho": 6, 
            "Julho": 7, "Agosto": 8, "Setembro": 9, "Outubro": 10, "Novembro": 11, "Dezembro": 12
        }
        mes_selecionado = st.select_slider("M√™s:", options=list(meses_pt.keys()), value=list(meses_pt.keys())[datetime.now().month - 1])
        
        num_mes = meses_pt[mes_selecionado]
        df_aniv = df.copy()
        df_aniv['Data de Nascimento'] = pd.to_datetime(df_aniv['Data de Nascimento'], format='%d/%m/%Y', errors='coerce')
        df_aniv.dropna(subset=['Data de Nascimento'], inplace=True)
        aniversariantes_df = df_aniv[df_aniv['Data de Nascimento'].dt.month == num_mes].sort_values(by=df_aniv['Data de Nascimento'].dt.day)

        st.subheader(f"Aniversariantes de {mes_selecionado}")
        if aniversariantes_df.empty:
            st.info("Nenhum aniversariante encontrado para este m√™s.")
        else:
            for _, row in aniversariantes_df.iterrows():
                st.markdown(f"**Dia {row['Data de Nascimento'].day}** - {row['Nome']}")

# --- 5) Estrutura Principal da Aplica√ß√£o ---
HEADERS = ["Nome", "CPF", "Sexo", "Estado Civil", "Profiss√£o", "Forma de Admissao", "Data de Nascimento", "Nacionalidade", "Naturalidade", "UF (Naturalidade)", "Nome do Pai", "Nome da Mae", "Nome do(a) C√¥njuge", "CEP", "Endereco", "Bairro", "Cidade", "UF (Endereco)", "Grau de Instru√ß√£o", "Celular", "Data de Conversao", "Data de Admissao", "Status", "Observa√ß√µes"]

# L√≥gica de Autentica√ß√£o
if 'authenticated' not in st.session_state:
    st.session_state.authenticated = False

if not st.session_state.authenticated:
    # Tela de Login Centralizada
    _, col_login, _ = st.columns([1, 2, 1])
    with col_login:
        st.image("logo_igreja.png", width=150) # Adicione o logo da sua igreja
        st.header("Fich√°rio de Membros v6.0")
        st.markdown("Fa√ßa o login para acessar o sistema.")
        # L√≥gica de autentica√ß√£o OAuth2 (simplificada)...
        if st.button("Entrar com Google", use_container_width=True):
             # A l√≥gica real do OAuth2 seria mantida aqui
            st.session_state.authenticated = True
            st.rerun()
else:
    # --- Interface Principal P√≥s-Login ---
    
    # Carregamento dos dados
    client = get_gspread_client()
    df_membros = carregar_membros_df(client)

    # Navega√ß√£o na Barra Lateral
    with st.sidebar:
        st.image("logo_igreja.png", width=100)
        st.header("PIB Gaibu v6.0")
        
        pagina_selecionada = st.radio(
            "Navega√ß√£o",
            ["Painel de Controle", "Gerenciamento de Membros", "Relat√≥rios"],
            key="navigation"
        )
        
        st.divider()
        st.info(f"Usu√°rio: {st.session_state.get('username', 'Admin')}")
        if st.button("Sair"):
            st.session_state.authenticated = False
            st.rerun()

    # Renderiza√ß√£o da p√°gina selecionada
    if pagina_selecionada == "Painel de Controle":
        pagina_painel_controle(df_membros)
    elif pagina_selecionada == "Gerenciamento de Membros":
        pagina_gerenciamento(df_membros)
    elif pagina_selecionada == "Relat√≥rios":
        pagina_relatorios(df_membros)
